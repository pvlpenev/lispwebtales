{mainmatter}

# The basics

## Raw example

Here is a complete hello-world web application, saved in the file `hello-world.lisp`:

{:lang="common-lisp"}
~~~~~~~~
;;;; hello-world.lisp

(ql:quickload "restas")

(restas:define-module #:hello-world
    (:use :cl :restas))

(in-package #:hello-world)

(define-route hello-world ("")
  "Hello World")

(start '#:hello-world :port 8080)
~~~~~~~~

This apps basically returns a page with the text "hello world" to any request at the "/" uri. It can be run from the command line using sbcl or ccl like this:

~~~~~~~~
$ sbcl --load hello-world.lisp
~~~~~~~~
or

~~~~~~~~
$ ccl --load hello-world.lisp
~~~~~~~~

Or loaded from the lisp prompt:

{:lang "common-lisp"}
~~~~~~~~
 * (load "hello-world.lisp")
~~~~~~~~

Now you can open the page [http://localhost:8080/](http://localhost:8080/) and see the result.

### Detailed explanation

I'll do an almost line by line explanation of what is happening.

{:lang="common-lisp"}
~~~~~~~~
(ql:quickload "restas")
~~~~~~~~

All examples in this book will be using the hunchentoot web server, and the RESTAS web framework built on top of it. 

As you can read in the Appendix A, the way we install and load libraries with Quicklisp is with the `quickload` function. The `ql:` part simply means that the function is in the ql package, which is a short name for the `quicklisp` package. Lisp packages often have such short alternative names, called nicknames. This line simply loads Restas, and installs it if it isn't already present. Since hunchentoot is a dependency for Restas, it gets loaded as well.

{:lang="common-lisp"}
~~~~~~~~
(restas:define-module #:hello-world
    (:use :cl :restas))

(in-package #:hello-world)
~~~~~~~~

Restas applications live in modules, which are similar to ordinary common lisp packages (and in fact, a package is being generated behind the scenes for us), we define them with the macro `define-module` from the `restas` package. It has the same syntax as common lisps `defpackage`. We give our module the name `hello-world` and specify that we want all public symbols in the `cl` and `restas` packages to be imported into our module. We then set the current package to `hello-world`. All the code after this form to the end of the file will be in that package.

Symbols starting with `#:` are uninterned, meaning they have no package, we just want to use its namestring, which is
`"HELLO-WORLD"`. Uninterned symbols are useful if you want a lightweight string to name something, in this case a package.

The following form `(:use :cl :restas)` means that all the "public" symbols from the packages `cl`(a standard package containing all lisp functions, variables, classes etc) and `restas` get imported into our `hello-world` package, so we don't have to write `restas:define-route` and can simply say `define-route`.

{:lang="common-lisp"}
~~~~~~~~
(define-route hello-world ("")
  "Hello World")
~~~~~~~~

Restas apps are based on uri handlers called routes. Routes in their simplest form shown here, have:
* A name (`hello-world` in this case)
* An uri template. in this case the empty string `""`, meaning it will match the `/` uri
* A body generating a response, in this case the string "hello world" returned to the client.

There are a few more details to routes, but we'll get to them in a bit.

{:lang="common-lisp"}
~~~~~~~~
(start '#:hello-world :port 8080) 
~~~~~~~~

The Restas function `start` is used to initializes a module, and starts a hunchentoot web server. As a first argument we give it the symbol naming our module with our application defined in it and pass a port number as a keyword parameter. Note that the symbol must be quoted ith a `'`. Again, there is quite a bit more to this function, but for now, we just need to get our app running.

## A simple blog

Let's look at a bit more complicated example: a simple blog app. It will be self contained in a single file you can run from the command line, just like the previous example. Subsequent examples will use ASDF and Quicklisp. In addition to Restas and Hunchentoot we'll also be using the SEXML library for html generation. The blog posts will be stored in memory as a list. The basic features would be:

* View all blog posts on the front page
* Separate pages for each post
* Separate pages for authors, listing all of their posts.
* Admin form for adding posts, protected by crude HTTP authorization.

## The source code

Here is the complete source of our app, consisting of slightly over 100 lines of code:

{:lang="common-lisp"}
~~~~~~~~
;;;; blogdemo.lisp

;;;; Initialization

(ql:quickload '("restas" "sexml"))

(restas:define-module #:blogdemo
  (:use #:cl #:restas))

(in-package #:blogdemo)

(sexml:with-compiletime-active-layers 
    (sexml:standard-sexml sexml:xml-doctype)
  (sexml:support-dtd
   (merge-pathnames "html5.dtd" (asdf:system-source-directory "sexml"))
   :<))

(<:augment-with-doctype "html" "")

(defparameter *posts* nil)

;;;; utility

(defun slug (string)
  (substitute #\- #\Space
              (string-downcase
               (string-trim '(#\Space #\Tab #\Newline) string))))

;;;; HTML templates

(defun html-frame (title body)
  (<:html
   (<:head (<:title title))
   (<:body
    (<:a :href (genurl 'home) (<:h1 title))
    body)))

(defun render-post (post)
  (list (<:div
         (<:h2 (<:a
                :href (genurl 'post :id (position post *posts* :test #'equal))
                (getf post :title)))
         (<:h3 (<:a
                :href (genurl 'author :id (getf post :author-id))
                "By " (getf post :author)))
         (<:p (getf post :content)))
        (<:hr)))

(defun render-posts (posts)
  (mapcar #'render-post posts))

(defun blogpage (&optional (posts *posts*))
  (html-frame
   "Restas Blogdemo"
   (<:div
    (<:a :href (genurl 'add) "Add a blog post")
    (<:hr)
    (render-posts posts))))

(defun add-post-form ()
  (html-frame
   "Restas Blogdemo"
   (<:form :action (genurl 'add/post) :method "post"
    "Author name:" (<:br)
    (<:input :type "text" :name "author")(<:br)
    "Title:" (<:br)
    (<:input :type "text" :name "title") (<:br)
    "Content:" (<:br)
    (<:textarea :name "content" :rows 15 :cols 80) (<:br)
    (<:input :type "submit" :value "Submit"))))

;;;; Routes definition

(define-route home ("")
  (blogpage))

(define-route post ("post/:id")
  (let* ((id (parse-integer id :junk-allowed t))
         (post (elt *posts* id)))
    (blogpage (list post))))

(define-route author ("author/:id")
  (let ((posts (loop for post in *posts*
                  if (equal id (getf post :author-id))
                  collect post)))
    (blogpage posts)))

(define-route add ("add")
  (multiple-value-bind (username password) (hunchentoot:authorization)
    (if (and (equalp username "user")
             (equalp password "pass"))
        (add-post-form)
        (hunchentoot:require-authorization))))

(define-route add/post ("add" :method :post)
  (let ((author (hunchentoot:post-parameter "author"))
        (title (hunchentoot:post-parameter "title"))
        (content (hunchentoot:post-parameter "content")))
    (push (list :author author
                :author-id (slug author)
                :title title
                :content content) *posts*)
    (redirect 'home)))

;;;; start

(start '#:blogdemo :port 8080)
~~~~~~~~

This file can be run from the command line like so:

~~~~~~~
$ sbcl --load blogdemo.lisp
~~~~~~~

or

~~~~~~~
$ ccl --load blogdemo.lisp
~~~~~~~

Or load it from the Lisp prompt:

{:lang "common-lisp"}
~~~~~~~~
 * (load "blogdemo.lisp")
~~~~~~~~

The username and password for adding new posts, as can be seen in the source, are "user" and "pass" respectively. Try adding posts, and vary the names of authors. Explore how the app behaves. In later chapters we will learn how to improve it a bit, but for now, it will do.

## Source walk-through

Let's walk through the various sections of this source code and see how it works.

### Initialization

{:lang="common-lisp"}
~~~~~~~~
(ql:quickload '("restas" "sexml"))
~~~~~~~~

We begin by loading the libraries we'll be using: Restas and sexml.

{:lang="common-lisp"}
~~~~~~~~
(restas:define-module #:blogdemo
  (:use #:cl #:restas))

(in-package #:blogdemo)
~~~~~~~~

This time our application is named `blogdemo`.

{:lang="common-lisp"}
~~~~~~~~
(sexml:with-compiletime-active-layers
    (sexml:standard-sexml sexml:xml-doctype)
  (sexml:support-dtd
   (merge-pathnames "html5.dtd" (asdf:system-source-directory "sexml"))
   :<))

(<:augment-with-doctype "html" "")
~~~~~~~~

SEXML is a library for outputting XML using lisp s-expressions as input. It takes an xml dtd and generates a package with functions for all the necessary tags. In our case, we give it an html5 dtd, and specify the package name `<`. This means that we can write code like:

{:lang="common-lisp"}
~~~~~~~~
(<:p "Hello world")
~~~~~~~~

and get this out:

{:lang="html"}
~~~~~~~~
<p>Hello world</p>
~~~~~~~~

A thing to note is that SEXML comes with an html5 dtd file as part of the distribution. The code `(merge-pathnames "html5.dtd" (asdf:system-source-directory "sexml"))` is used to find the path to that file. Don't worry about how this actually works, essentially it means "give me the path to the file 'html5.dtd' in the sexml installation directory". 

And finally, we define our "database" as an empty list named by the variable `*posts*`:

{:lang="common-lisp"}
~~~~~~~~
(defparameter *posts* nil)
~~~~~~~~

### Utility

I've included a section for utility functions, which at this point contains only one function:

{:lang="common-lisp"}
~~~~~~~~
(defun slug (string)
  (substitute #\- #\Space
              (string-downcase
               (string-trim '(#\Space #\Tab #\Newline)
                            string))))
~~~~~~~~

If you are familiar with Django, you probably know the term 'slug'. A slug is a string we can use in urls. The `slug` function takes a string, such as `"  Foo Bar BaZ  "` and converts it to a url friendly string like `"foo-bar-baz"` by trimming surrounding white space, converting all the characters to lower case and substituting the spaces between words for dashes. We'll be using it to create ID's for authors in our "database".

### HTML templates

In general the rules for using sexml for html generation are as follows:

~~~~~~~~
(<:tagname attributes* content*)
~~~~~~~~

where attributes can be of the form:

~~~~~~~~
:key value
~~~~~~~~

and the content can be a string or a list of strings to be inserted into the body of the tag. For example, this snippet:

{:lang="common-lisp"}
~~~~~~~~
(<:a :href "/foo/bar" "This is a link to /foo/bar")
~~~~~~~~

Will produce the following HTML: `<a href="/foo/bar">This is a link to /foo/bar</a>`

Let's take a look at the various template functions we'll be using:

{:lang="common-lisp"}
~~~~~~~~
;;;; HTML templates

(defun html-frame (title body)
  (<:html
   (<:head (<:title title))
   (<:body
    (<:a :href (genurl 'home) (<:h1 title))
    body)))
~~~~~~~~

`html-frame` is a function, which takes a title and a body and converts it to an html page whose body has a link to the home page at the top. We can call it like so:

{:lang="common-lisp"}
~~~~~~~~
(html-frame "This is a title" "This is a body")
~~~~~~~~

And get the following output as a lisp string (I've indented it, and broken it up to separate lines):

{:lang="html"}
~~~~~~~~
<html>
  <head>
    <title>This is a title</title>
  </head>
  <body>
    <a href="/"><h1>This is a title</h1></a>
    This is a body
  </body>
</html>
~~~~~~~~

Of note is the use of the restas function `genurl` which takes a route, and generates a url that would be handled by the route function. In this case `(genurl 'home)` will generate the `/` url, since that is what the `home` route (defined in the next section) handles. This is done because restas applications can me "mounted" on different points in a url path tree. if the whole application is mounted on the uri `/blog`, then the same code (without having to change it) would generate `/blog/` as the output.



Before we look at how we generate the blog posts themselves, let me explain how we store them. We store blog posts as a list of plists, a convention for lists where the odd numbered elements are keys, and the even numbered elements are values. Plists are useful as lightweight maps, and look like this:

{:lang="common-lisp"}
~~~~~~~~
'(:author "Author Name"
  :author-id "author-name" ; this is a slug string
  :title "This is a title"
  :content "This is the body of the blog post")
~~~~~~~~

By convention, keys in plists are common lisp keywords, starting with colons. Elements in a plist can be accessed with the function `getf`, which takes a plist and a key as its argument. So if we wanted to get the name of the author from the plist `post`, we would write `(getf post :author)`. Simple as that. Now let's look at how we use them:

{:lang="common-lisp"}
~~~~~~~~
(defun render-post (post)
  (list (<:div
         (<:h2 (<:a
                :href (genurl 'post :id (position post *posts* :test #'equal))
                (getf post :title)))
         (<:h3 (<:a
                :href (genurl 'author :id (getf post :author-id))
                "By " (getf post :author)))
         (<:p (getf post :content)))
        (<:hr)))

(defun render-posts (posts)
  (mapcar #'render-post posts))
~~~~~~~~

The function `render-post` takes a blog post and renders it as html. The `genurl`s in this function are a bit more complicated. In this case `genurl` has to  generate urls to each individual post, which requires additional information, such as its ID. We use the post's position is the list of posts as its id, so each post would have a url like `posts/1` or whatever its number in the list is. Same is true for the author, except authors are identified by a slug of their name. so the url would look like `author/author-name`. This works because routes can handle more than one url with similar structure, for instance both `posts/1` and `posts/2` will be handled by the route `post`, We'll see how that works in a minute.

The function `render-posts` simply takes a list of posts, and renders each one individually, into a list of html strings. It uses the `mapcar` function, which might be called `map` or `each` in other languages.

{:lang="common-lisp"}
~~~~~~~~
(defun blogpage (&optional (posts *posts*))
  (html-frame
   "Restas Blogdemo"
   (<:div
    (<:a :href (genurl 'add) "Add a blog post")
    (<:hr)
    (render-posts posts))))
~~~~~~~~

`blogpage` takes a bunch of blog posts and renders a complete html page with them. By default it renders all of the posts, but we can give it a subset, as we do when we show only the posts by one author.

And finally, `add-post-form` generates a page with an html form in it for adding a blog post:

{:lang="common-lisp"}
~~~~~~~~
(defun add-post-form ()
  (html-frame
   "Restas Blogdemo"
   (<:form :action (genurl 'add/post) :method "post"
    "Author name:" (<:br)
    (<:input :type "text" :name "author")(<:br)
    "Title:" (<:br)
    (<:input :type "text" :name "title") (<:br)
    "Content:" (<:br)
    (<:textarea :name "content" :rows 15 :cols 80) (<:br)
    (<:input :type "submit" :value "Submit"))))
~~~~~~~~

This is it for html generation.

### Routes

Route handlers are the heart of any Restas application. The complete syntax for `define-route` is:

~~~~~~~~
(define-route name (template &key method content-type)
  declarations*
  body*)
~~~~~~~~

We've seen a very basic usage of this. The blog example doesn't use the optional declarations, we'll cover them later, but the optional method keyword parameter will come in handy when we need to handle `POST` data from a form. By default its value is `:get`, but can be any HTTP method. Using this we can have routes with the same uri template, but different HTTP methods, this makes Restas very well suited for RESTful APIs as the name suggests. Let's take a look at the individual routes:

{:lang="common-lisp"}
~~~~~~~~
(define-route home ("")
  (blogpage))
~~~~~~~~

Simply displays the home page.

{:lang="common-lisp"}
~~~~~~~~
(define-route post ("post/:id")
  (let* ((id (parse-integer id :junk-allowed t))
         (post (elt *posts* id)))
    (blogpage (list post))))
~~~~~~~~

The `post` route handles the case where we are viewing a single blog post. We see that the `post` route has an interesting template: `"post/:id"`. If you are familiar with something like Sinatra, you'll find this syntax familiar. Parts of a uri template beginning with a colon designate route variables, and can match any uri with that structure, as I mentioned in the previous section. For example `/post/0`, `/post/1` and `/post/2` will all match and be handled by this route. But so will `/post/foo`, our app breaks if we go to a url that doesn't have an integer url component. We'll see later how we can fix this, for now, we simply don't do that. The matched string also gets bound to a lisp variable in the body of the route, in our case `id`.

Let's look at the body, each such route template variable is bound to the string that it matched, so we get values like `"0"`, or `"1"` or `"foo"`. Using common lisp's `parse-integer` we convert it to an integer, and we look up the element in the list of posts with the `elt` function, which takes a list (or any lisp sequence) and gets the item at the index we suply as a second argument.

We render the post by passing it as a list to `blogpage`, which returns a string, which Restas in turn returns to the browser.


{:lang="common-lisp"}
~~~~~~~~
(define-route author ("author/:id")
  (let ((posts (loop for post in *posts*
                  if (equal id (getf post :author-id))
                  collect post)))
    (blogpage posts)))
~~~~~~~~

The `author` route is very similar. we have an `:id` variable as well, but it can be any string, so we don't worry about parsing it. We use common lisp's powerful loop macro to iterate over all the posts, and if the id we supply in the url matches the `:author-id`s of the individual posts, we collect them into a new list. `:author-id` is generated as a slug version of the author name, specifically so that we can use it as a key and as a part of a url. 

If we have blog posts by an author named `"Pavel Penev"`, its slug would have been saved it into the database as `"pavel-penev"`, and if we go to the uri `author/pavel-penev`, we'll see all the posts by that author on the page. 


{:lang="common-lisp"}
~~~~~~~~
(define-route add ("add")
  (multiple-value-bind (username password) (hunchentoot:authorization)
    (if (and (equalp username "user")
             (equalp password "pass"))
        (add-post-form)
        (hunchentoot:require-authorization))))
~~~~~~~~

The `add` route handles displaying a form for the user to submit a blog post. Since we don't want just anybody to add posts, we want to add some user authentication, but since this is just a simple example, I won't bother with login forms, cookies and sessions, we'll leave that for a later chapter. For now I'll use simple HTTP authorization.

If you are unfamiliar with HTTP authentication, it is a very crude way to log into a web site. The browser has to supply a username and a password as an HTTP header. The function `hunchentoot:authorization` returns them as two separate values, since common lisp supports multiple return values, instead of just one (as is the case in probably every other language you've ever used), we have to bind them using the macro `multiple-value-bind`, which is like `let` for multiple values. It binds the variables `username` and `password` and in the body we check if they are the expected values, in our case "user" and "pass". If they are, we render our form, and if not, we tell the browser to ask the user for a username and password using `hunchentoot:require-authorization'.  

{:lang="common-lisp"}
~~~~~~~~
(define-route add/post ("add" :method :post)
  (let ((author (hunchentoot:post-parameter "author"))
        (title (hunchentoot:post-parameter "title"))
        (content (hunchentoot:post-parameter "content")))
    (push (list :author author
                :author-id (slug author)
                :title title
                :content content) *posts*)
    (redirect 'home)))
~~~~~~~~

Finally, `add/post` handles the data send to us by the form generated by `add`. We specify that the http method should be `POST`, and use the function `hunchentoot:post-parameter` to extract the user-submitted values from the request. The strings `"author"`, `"title"` and `"content"` were the names of fields in our form. We bind them to values, and built a plist using the function `list`. Note that we add the `:author-id` key, with a value generated by applying `slug` to the `author` string. The list we `push` onto the database variable `*posts*`. `push` takes an item, and adds it to the front of a list. At the end we `redirect` back to the home page. `redirect` is a restas function with much the same syntax as `genurl` but instead of generating a url out of a route name, it generates the url, and tells the browser to redirect to it.

## Conclusion

This concludes the honeymoon chapter. We saw all the very basic ideas: A restas web application is a module, which is a collection of route functions that handle uri requests. There is quite a bit more to it than that, and we'll get to it in the next chapters. The code was kind of bare bones, usually we would like to have an ASDF system defined, so we can have all the lisp infrastructure available for us (have Quicklisp download all of our dependencies, have our templates be compiled automatically, and be able to develop interactively). At the moment our apps are bare scripts, and lisp is not a scripting language, even though you can use it as such. It's a powerful interactive system, and we would be fools if we didn't take advantage of that power.
