# HTML generation and templating

## Exploring all the options

### HTML generators

An html generator is a library to generate html from lisp code. SEXML, the library we saw earlier is an example of one such generator. There are as many such libraries as there are lisp programmers, I'll lie to you if I told you I didn't try writing one myself. [Cliki][gen] lists 12, and that is certainly not all of them. The most popular such library is `cl-who` and it is the most likely for you to come across if you read other peoples code. But I, and many others don't like `cl-who`(not that it's bad, just not my taste), so I just picked another one for the examples in this book. Namely SEXML.

A note about SEXML, when we want to use it in a project, we'll add its initialization code to the `defmodule.lisp` file:

{:lang="common-lisp"}
~~~~~~~~
(sexml:with-compiletime-active-layers 
    (sexml:standard-sexml sexml:xml-doctype)
  (sexml:support-dtd
   (merge-pathnames "html5.dtd" (asdf:system-source-directory "sexml"))
   :<))

(<:augment-with-doctype "html" "")
~~~~~~~~

In chapter one, since you didn't yet know what asdf was, I didn't explain the line `(asdf:system-source-directory "sexml")`. ASDF here finds us the directory where Quicklisp installed SEXML.

`(<:augment-with-doctype "html" "")` simply means that if we use the `<:html` function, the result will have an html5 doctype line added to the result.

### Template languages

In most other languages, you don't have dsls for outputting html, like in lisp, so you tend to use templates. Common Lisp has a few of those. Most popular is probably [`html-template`](http://weitz.de/html-template/) by Hunchentoot creator (among other things, including cl-who) Edi Weitz. Its documentation page claims it is loosely based on a similar Perl library. 

The one I'm going to be using for some of my examples is the Common Lisp port of Google's Closure Template system, written by the creator of Restas, Andrey Moskvitin. 


## closure-template

For more, read the excellent [documentation][docs] and check out the examples at the [github repo][clct].

### Concepts

A closure template can be defined either in a file or a string. Both starting with a namespace declaration, and subsequent template definitions. Here is a simple example:

{:lang="html"}
~~~~~~~~
{namespace hello}

{template main}
  <h1>Hello World</h1>
{/template}
~~~~~~~~

Once compiled, this code will generate a Common Lisp package named `hello` containing the function `main`. Let's try it at the REPL:

{:lang="common-lisp"}
~~~~~~~~
 * (ql:quickload "closure-template")
 * (defparameter *template* "{namespace hello}
{template main}
  <h1>Hello World</h1>
{/template}")
 * (closure-template:compile-template :common-lisp-backend *template*)
 * (hello:main)
 => "<h1>Hello World</h1>"
~~~~~~~~

Each template namespace would usually live in a file ending in `.tmpl` by convention, and be compiled in our files.

The template commands have a fairly simple syntax: The command name, enclosed in `{}`.

Notice that the `{template}` tag had to be closed with `{/template}`, some tags like namespace don't need to be closed, while others do. 

(Note: There can be only one namespace declaration per file.)

If we saved our template in a file, named say `main.tmpl`, we can compile it and run it at the repl like so:

{:lang="common-lisp"}
~~~~~~~~
 * (ql:quickload "closure-template")
 * (closure-template:compile-cl-templates #P"/path/to/main.tmpl")
 * (hello:main)
 => "<h1>Hello World</h1>"
~~~~~~~~

I'll explain the rest of the syntax we'll need as we go along.

### More complex example

Let's create a new Restas project where we can play around with closure templates. Let's call it `closure-hello`:

{:lang="common-lisp"}
~~~~~~~~
 * (ql:quickload "restas-project")
 * (restas-project:start-restas-project "closure-hello" :depends-on '(:closure-template))
~~~~~~~~

Create the file templates/main.tmpl and put the following code into it:

{:lang="html"}
~~~~~~~~
{namespace closure-hello.view}

{template main}
  <html>
    <head>
      <title>{$title}</title>
    </head>
    <body>
      {$body | noAutoescape}
    </body>
  </html>
{/template}
~~~~~~~~

Now let's tell ASDF that we want this file to be compiled when we load our project, we do this by adding two things to the `defsystem` form in `closure-hello.asd`. First is the option `:depends-on (#:closure-template)`, because ASDF needs closure-template in order to know how to compile closure templates. Second, we must specify the file as a component of type `:closure-template`, so our `defsystem` should look like this:

{:lang="common-lisp"}
~~~~~~~~
(asdf:defsystem #:closure-hello
  :serial t
  :description "Your description here"
  :author "Your name here"
  :license "Your license here"
  :defsystem-depends-on (#:closure-template)
  :depends-on (:RESTAS :CLOSURE-TEMPLATE)
  :components ((:closure-template "templates/main")
               (:file "defmodule")
               (:file "closure-hello")))
~~~~~~~~

Now, let's load the system, and see if our template compiled:

{:lang="common-lisp"}
~~~~~~~~
 * (ql:quickload "closure-hello")
 * (closure-hello.view:main)
 => "<html> <head> <title></title> </head> <body>  </body> </html>"
~~~~~~~~

Let's examine the new syntax in the template. Tags starting with a `$`, like `{$title}`, simply print the content of the variable `title` to be into the output of the template. It's actually a short hand for the expression `{print title}`, but since it is used very often it was shortened to just `$`. Variables are passed to templates like as plists. Like so:

{:lang="common-lisp"}
~~~~~~~~
 * (closure-hello.view:main '(:title "hello" :body "<h1>world</h1>"))
 => "<html> <head> <title>hello</title> </head> <body> <h1>world</h1> </body> </html>"
~~~~~~~~

And here is the output pretty printed, just so you can see that it worked:

{:lang="html"}
~~~~~~~~
<html>
  <head>
    <title>hello</title>
  </head>
  <body>
    <h1>world</h1>
  </body>
</html>
~~~~~~~~

The | in the expression `{$body | noAutoescape}` is used to give the `print` command optional directives. In this case the `noAutoescape` directive, which turns off auto escaping, which is on by default and would escape the html we want to put into the body. This would make the browser not render it, but display the html directly. For example if the directive wasn't there, this is what we would get:

{:lang="common-lisp"}
~~~~~~~~
 * (closure-hello.view:main '(:title "hello" :body "<h1>world</h1>"))
 => "<html> <head> <title>hello</title> </head> <body> &lt;h1&gt;world&lt;/h1&gt; </body> </html>"
~~~~~~~~

The `<h1>` tag got replaced with `&lt;h1&gt;`, and `</h1>` with `&lt;/h1&gt;`.

Let's define a handler, this is what the closure-hello.lisp file looks like:

{:lang="common-lisp"}
~~~~~~~~
;;;; closure-hello.lisp

(in-package #:closure-hello)

;;; "closure-hello" goes here. Hacks and glory await!

(restas:define-route main ("")
  (closure-hello.view:main
   (list :title "Hello World"
         :body "<h1>Hello World</h1>")))
~~~~~~~~

Now we just quickload it, and start the server:

{:lang="common-lisp"}
~~~~~~~~
 * (ql:quickload "closure-hello")
 * (restas:start '#:closure-hello :port 8080)
~~~~~~~~

Confirm that it works in the browser:

![](images/c3i1.png)

Yay!

### Next step: Let's do some loops.

The data we pass to the templates can be either plists like we already saw, or they can be just lists of items we can handle with loops. For example `(list "val1" "val2" "val3")`. And of course we can nest them as we wish. We'll define a new page, where we will list a bunch of items in an html list. Let's say we have a list of TODO items, here is what the template would look like, add this code to the main.tmpl file:

{:lang="html"}
~~~~~~~~
{template todos}
  <h1>Tasks for today:</h1>
  <ul>
    {foreach $task in $todos}
      <li>{$task}</li>
    {/foreach}
  </ul>
{/template}
~~~~~~~~

`$todos` is the variable we pass directly to the template, foreach will loop through the contents, and put each item in the variable `$task`, which we can use in the body. The body outputs each list item.

Now let's add the handler in `closure-hello.lisp`, first we define a variable named *todos*, and then we define a restas route to handle requests to todos/, here is what the whole file should look like:

{:lang="common-lisp"}
~~~~~~~~
;;;; closure-hello.lisp

(in-package #:closure-hello)

;;; "closure-hello" goes here. Hacks and glory await!

(defparameter *todos* (list "Get milk" "Pick up paycheck" "Cash paycheck"))

(restas:define-route main ("")
  (closure-hello.view:main
   (list :title "Hello World"
         :body "<h1>Hello World</h1>")))

(restas:define-route todos ("todos")
  (closure-hello.view:main
   (list :title "Tasks for today"
         :body (closure-hello.view:todos (list :todos *todos*)))))
~~~~~~~~

Notice that the code for the `todos` route is pretty much the same as for `main`, but we pass the output of the `todos` template to the body parameter of the `main` template, here is what it should look like in the browser when you navigate to the [http://localhost:8080/todos] url:

![](images/c3i2.png)

### Adding logic

Closure has support for conditionals, we'll only take a look at a simple example using `if`. The syntax is pretty straight-forward:

~~~~~~~~
{if <expression1>}
  ...
{elseif <expression2>}
  ...
{else}
  ...
{/if}
~~~~~~~~

We want to add a link at the top of our main page to our todos page, but we also want to add a link to the main page, on our todos page. We'll add a conditional in our `main` template to check on which page we are, and put the appropriate link there. Here is what our template should look like:

{:lang="html"}
~~~~~~~~
{template main}
  <html>
    <head>
      <title>{$title}</title>
    </head>
    <body>
      {if $main}
        <a href="/todos">Todos</a>
      {elseif $todos}
        <a href="/">Home</a>
      {else}
        <h1>Where am i?</h1>
      {/if}
      {$body | noAutoescape}
    </body>
  </html>
{/template}
~~~~~~~~

There are two new variables that we could pass to the main template, `$main`, which if true, means we are on the main page, and need to link to `todos/`, and `$todos`, which means we need to link to the home page. If none are passed, we output a message: "Where am i?". We need to modify our routes, to pass the new parameters and tell the template what to do, we will also add a `lost/` page that doesn't have any of the parameters:

{:lang="common-lisp"}
~~~~~~~~
;;;; closure-hello.lisp

(in-package #:closure-hello)

;;; "closure-hello" goes here. Hacks and glory await!

(defparameter *todos* (list "Get milk" "Pick up paycheck" "Cash paycheck"))

(restas:define-route main ("")
  (closure-hello.view:main
   (list :title "Hello World"
         :main t
         :body "<h1>Hello World</h1>")))

(restas:define-route todos ("todos")
  (closure-hello.view:main
   (list :title "Tasks for today"
         :todos t
         :body (closure-hello.view:todos (list :todos *todos*)))))

(restas:define-route lost ("lost")
  (closure-hello.view:main
   (list :title "Are we lost?")))
~~~~~~~~

And here are the screenshots:

![](images/c3i3.png)

![](images/c3i4.png)

![](images/c3i5.png)

### About routes and templates.

A common pattern we see is that all of the routes is that they all call the same template, `closure-hello.view:main` to render their content. It would be nice to tell Restas to use the same template on all of the routes. I haven't talked in depth about how routes work, but in general, a route can return several types of values, if it returns an integer, say `404`, that will be interpreted as an HTTP status code, and an appropriate page will be returned to the user. If it returns a string, that string will be the body of the response, the routes we've seen so far are of this kind. A route can also return a common-lisp pathname object, in which case hunchentoot will serve that file to the user. We can have a route like this in order to serve a static css file:

{:lang="common-lisp"}
~~~~~~~~
(define-route css ("main.css" :content-type "text/css")
  #P"/path/to/css/main.css")
~~~~~~~~

And finally, a route can return a list, in which case something called the routes default render method will be called on the list, and the result returned to the user. There are two ways to specify a default render method, one is in the route definition, using a declaration. For example, we could have written 'main` this way:

{:lang="common-lisp"}
~~~~~~~~
(restas:define-route main ("")
  (:render-method #'closure-hello.view:main)
  (list :title "Hello World"
        :main t
        :body "<h1>Hello World</h1>"))
~~~~~~~~

But we'd have to do that for all of the routes, and they all use the same render method. We could instead have a default render method for the entire module, in `defmodule.lisp`:

{:lang="common-lisp"}
~~~~~~~~
(restas:define-module #:closure-hello
  (:use #:cl)
  (:render-method #'closure-hello.view:main))
~~~~~~~~

And then have all of the routes simply return lists:

{:lang="common-lisp"}
~~~~~~~~
;;;; closure-hello.lisp

(in-package #:closure-hello)

;;; "closure-hello" goes here. Hacks and glory await!

(defparameter *todos* (list "Get milk" "Pick up paycheck" "Cash paycheck"))

(restas:define-route main ("")
  (list :title "Hello World"
        :main t
        :body "<h1>Hello World</h1>"))

(restas:define-route todos ("todos")
  (list :title "Tasks for today"
        :todos t
        :body (closure-hello.view:todos (list :todos *todos*))))

(restas:define-route lost ("lost")
  (list :title "Are we lost?"))
~~~~~~~~

Pretty neat, huh? 

### Tips for Emacs users.

closure-template-html-mode is in Marmalade, so you can install it from there. You can also use the chord `C-c C-l` to compile template files using slime, if `closure-template` is loaded into your lisp image.

### Conclusion

That's about all the closure syntax you need for now, I encourage you to go through all of the documentation:

[Google's documentation][gct]

[Complete list of closure commands][commands], most of them are supported by the lisp version.

[The examples in the github repo][clct]

[Documentation in Russian](http://archimag.lisper.ru/docs/cl-closure-template/index.html)

Keep in mind that in order to keep the examples simpler I will not use `closure-template` heavily for the rest of this book. In fact there is a lot I left out in this tutorial, since I will probably not need it. I aim to keep this short and simple.


[clct]: https://github.com/archimag/cl-closure-template
[gct]: https://developers.google.com/closure/templates/
[commands]: https://developers.google.com/closure/templates/docs/commands
[cliki]: http://www.cliki.net/
[gen]: http://www.cliki.net/HTML%20generator
